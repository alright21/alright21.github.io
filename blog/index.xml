<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on Alberto Giust</title><link>https://alright21.github.io/blog/</link><description>Recent content in Blog on Alberto Giust</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 21 Sep 2023 09:44:32 +0200</lastBuildDate><atom:link href="https://alright21.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Extract App Information from APK and IPA Package</title><link>https://alright21.github.io/blog/mobile_extract_info/</link><pubDate>Sun, 07 Jan 2024 10:15:31 +0100</pubDate><guid>https://alright21.github.io/blog/mobile_extract_info/</guid><description>Extract App Information from APK and IPA Package During my mobile security journey, I often get stuck when searching for the publicly known app information that I am testing. We are talking about app name, app main package, version number and build. This information is important for reporting: I usually fire up my MobsF Docker instance and get this information from there. This process is often too slow, especially for big applications: I often forget to note down this data before turning off the Docker instance:(</description></item><item><title>Reversing and Hooking Native Libraries in Android with Frida</title><link>https://alright21.github.io/blog/mobile_security_native/</link><pubDate>Thu, 26 Oct 2023 18:01:16 +0200</pubDate><guid>https://alright21.github.io/blog/mobile_security_native/</guid><description>Reversing and Hooking Native Libraries in Android with Frida Android applications are written in Java (Kotlin): we can use tools like jadx to decompile Java smali code to analyze the code, identify interesting methods and find possible secrets.
In some cases, Android applications use native libraries to perform some specific tasks: they may be used for root detection, or they can also be responsible for encryption, or simply to run simple tasks, like hide secrets.</description></item><item><title>Intercepting Non-HTTP Traffic in Android</title><link>https://alright21.github.io/blog/mobile_nohttp/</link><pubDate>Wed, 06 Sep 2023 12:25:03 +0200</pubDate><guid>https://alright21.github.io/blog/mobile_nohttp/</guid><description>Intercepting Non-HTTP Traffic in Android Recently I have started solving a mobile security CTF called hpAndro and I stumbled upon two challenges focusing on intercepting non-HTTP traffic in Android. I tried to check if I could do it by setting up Wireshark on my laptop and detect this communication directly from that, but it was not working.
I thought I could change my perspective and monitor traffic directly from my device (it is always Linux).</description></item><item><title>Intercepting Traffic in Mobile Flutter Applications</title><link>https://alright21.github.io/blog/mobile_flutter/</link><pubDate>Tue, 01 Aug 2023 08:50:38 +0200</pubDate><guid>https://alright21.github.io/blog/mobile_flutter/</guid><description>Intercepting Traffic in Mobile Flutter Applications During our tests, it may happen that we have to find vulnerabilities in applications built with the Flutter framework. It is pretty common when we have both Android and iOS apps. This framework raises some problems when we need to intercept traffic for two reasons:
flutter apps are proxy unaware - if we add a proxy listener from the settings of our phone, the application will ignore it flutter apps often implement ssl pinning techniques that are not easily bypassed using standard frida scripts Below are explained the solutions for Android and iOS.</description></item><item><title>Mobile Security Introduction</title><link>https://alright21.github.io/blog/mobile_security_intro/</link><pubDate>Sun, 23 Jul 2023 18:00:00 +0200</pubDate><guid>https://alright21.github.io/blog/mobile_security_intro/</guid><description>Mobile Security Introduction After quite a while, I finally decided to upload this article. If you come across any inconsistencies, I am always open to feedback. I will continuously update it, aiming to create a comprehensive &amp;ldquo;Mobile Security Introduction Garden&amp;rdquo;. Have fun reading! :)
The world of mobile application security requires to have different skills and knowledge compared to web application testing because we are also dealing with a client installed on our device that handles user input, and often communicates with a backend server.</description></item></channel></rss>