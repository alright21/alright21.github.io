<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Alberto Giust</title><link>https://alright21.github.io/</link><description>Recent content on Alberto Giust</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 29 Feb 2024 08:30:26 +0100</lastBuildDate><atom:link href="https://alright21.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Exploiting Exported Services: IPC Messenger</title><link>https://alright21.github.io/security/exploiting_ipc_messenger/</link><pubDate>Thu, 29 Feb 2024 08:30:26 +0100</pubDate><guid>https://alright21.github.io/security/exploiting_ipc_messenger/</guid><description>Exploiting Exported Services: IPC Messenger Hello everyone! It&amp;rsquo;s alright here. In this article we will explore the concepts of exported components, bound services, and IPC (Inter-Process Communication) in Android, what are the risks associated to them and how we can exploit them when misconfigured. I will share a vulnerable application based on a real life example I encountered during my daily job.
Prepare your Android knowledge and let&amp;rsquo;s get started.</description></item><item><title>Leet Code Exercises</title><link>https://alright21.github.io/dev/leet_code/</link><pubDate>Mon, 29 Jan 2024 20:40:03 +0100</pubDate><guid>https://alright21.github.io/dev/leet_code/</guid><description>Leet Code Exercises Here is a list of my Leet Code solution (non exaustive). I am following https://neetcode.io/roadmap
Contains Duplicate class Solution: def containsDuplicate(self, nums: List[int]) -&amp;gt; bool: result = {} for item in nums: if item in result: return True result[item] = True return False Valid Anagram class Solution: def isAnagram(self, s: str, t: str) -&amp;gt; bool: res = {} for item in s: if item in res: res[item]+=1 else: res[item]=1 for item in t: if item in res: res[item]-=1 if res[item]==0: del res[item] else: return False if len(res)&amp;gt;0: return False return True Two Sum class Solution: def twoSum(self, nums: List[int], target: int) -&amp;gt; List[int]: for i in range(len(nums)): for j in range(i+1,len(nums)): if nums[i] + nums[j] == target: return [i,j] Group Anagrams class Solution: def groupAnagrams(self, strs: List[str]) -&amp;gt; List[List[str]]: res = {} for s in strs: ss = str(sorted(s)) if ss in res: res[ss].</description></item><item><title>Extract App Information from APK and IPA Package</title><link>https://alright21.github.io/security/mobile_extract_info/</link><pubDate>Sun, 07 Jan 2024 10:15:31 +0100</pubDate><guid>https://alright21.github.io/security/mobile_extract_info/</guid><description>Extract App Information from APK and IPA Package During my mobile security journey, I often get stuck when searching for the publicly known app information that I am testing. We are talking about app name, app main package, version number and build. This information is important for reporting: I usually fire up my MobsF Docker instance and get this information from there. This process is often too slow, especially for big applications: I often forget to note down this data before turning off the Docker instance:(</description></item><item><title>Translations</title><link>https://alright21.github.io/education/translations/</link><pubDate>Sat, 06 Jan 2024 09:47:22 +0100</pubDate><guid>https://alright21.github.io/education/translations/</guid><description>Translations Raspberry Pi Foundation This is a list of coding projects I helped to translate in Italian for the Raspberry Pi Foundation. Those projects are useful for Coderdojo and Codeclub during their meetings. In Milano, we started using them, and they are great! I suggest taking a look at those if you are into Computer Science education in primary schools in Italy (or in other countries, there are several languages available).</description></item><item><title>Privacy</title><link>https://alright21.github.io/privacy/</link><pubDate>Tue, 19 Dec 2023 16:21:15 +0100</pubDate><guid>https://alright21.github.io/privacy/</guid><description>Privacy This website uses Google Analytics cookies to gather insight about the traffic. All data is anonymized, I only use it to check if someone is interested in my content:)
No data is sold to third-party. If you opt-out, I won&amp;rsquo;t collect any information.</description></item><item><title>hpAndro Mobile CTF</title><link>https://alright21.github.io/ctf/mobile_hpandro/</link><pubDate>Thu, 07 Dec 2023 07:00:00 +0200</pubDate><guid>https://alright21.github.io/ctf/mobile_hpandro/</guid><description>hpAndro Mobile CTF Hello everyone! In this blog post, I will explain how I solved some challenges in hpAndro mobile CTF. I am trying to learn mobile security, and this mobile app helped me to improve my skills, especially on what concern dynamic analysis. I will update this article in the future, so keep an eye on that! Furthermore, I suggest you to try these challenges first on your own, but do not hesitate to look for the solutions if you need it:) And if you have a better solution, feel free to contact me and I will be happy to learn from you!</description></item><item><title>Coderdojo Turtle Race</title><link>https://alright21.github.io/education/coderdojo_turtle_race/</link><pubDate>Mon, 06 Nov 2023 19:04:28 +0100</pubDate><guid>https://alright21.github.io/education/coderdojo_turtle_race/</guid><description>Coderdojo Turtle Race Hello everyone! Today I will show you what I am planning to do in future Coderdojo sessions with young ninjas who would like to learn Python.
In the Raspberry Pi projects page, there are some interesting learning paths and tutorials that we can use to teach Scratch, Python, Pi Pico and more. I found out this interesting project with Python called Turtle Race.
It is a fun project because kids learn about some advanced turtle and Python features, while creating a simple game.</description></item><item><title>FE CTF 2023</title><link>https://alright21.github.io/ctf/fe_ctf_2023/</link><pubDate>Mon, 30 Oct 2023 08:58:25 +0200</pubDate><guid>https://alright21.github.io/ctf/fe_ctf_2023/</guid><description>FE CTF 2023 Write-ups for FE CTF 2023. This weekend I was quite busy, but I managed to solve some easy challenges in this CTF.
Challenges Login - Level 1 Login - Level 2 Login - Level 4 CRACKME.EXE - Level 1 Challenges Login - Level 1 Category Points Solves Web 26 357 Challenge Description So you fancy yourself a hacker? Me? I don&amp;rsquo;t even see the code!
Log in, get flag</description></item><item><title>Reversing and Hooking Native Libraries in Android with Frida</title><link>https://alright21.github.io/security/mobile_security_native/</link><pubDate>Thu, 26 Oct 2023 18:01:16 +0200</pubDate><guid>https://alright21.github.io/security/mobile_security_native/</guid><description>Reversing and Hooking Native Libraries in Android with Frida Android applications are written in Java (Kotlin): we can use tools like jadx to decompile Java smali code to analyze the code, identify interesting methods and find possible secrets.
In some cases, Android applications use native libraries to perform some specific tasks: they may be used for root detection, or they can also be responsible for encryption, or simply to run simple tasks, like hide secrets.</description></item><item><title>TCP1P CTF 2023</title><link>https://alright21.github.io/ctf/tcp1pctf/</link><pubDate>Tue, 17 Oct 2023 08:53:58 +0200</pubDate><guid>https://alright21.github.io/ctf/tcp1pctf/</guid><description>TCP1P CTF 2023 Write-ups for TCP1P CTF 2023.
Challenges Intention Challenges Intention Category Points Solves Mobile 356 13 Challenge Description Approach The challenge presents an interesting setup compared to regular mobile challenges: we are asked to create a malicious app that exploits it inside an emulator, great idea!
The application has two activities: MainActivity, where nothing happens, and a FlagSender, where the content of flag.txt file is set as an intent result and sent back to the caller.</description></item><item><title>About me</title><link>https://alright21.github.io/about/</link><pubDate>Fri, 08 Sep 2023 15:39:23 +0200</pubDate><guid>https://alright21.github.io/about/</guid><description>Hi there üëã I am Alberto, Penetration Tester and Security Enthusiast (mobile-focused)
üòÑ Pronouns: He/Him üìç Milan, Italy üî≠ I‚Äôm currently working on Web and Mobile application security testing for Spike Reply. I hunt for security bugs and report them to clients üå± I‚Äôm currently learning Web and Mobile Security (constantly evolving) üìú eWPT (eLearn Security Web Penetration Tester) üìú eCDFP (eLearn Certified Digital Forensics Professional) üì´ How to reach me: alberto.</description></item><item><title>Intercepting Non-HTTP Traffic in Android</title><link>https://alright21.github.io/security/mobile_nohttp/</link><pubDate>Wed, 06 Sep 2023 12:25:03 +0200</pubDate><guid>https://alright21.github.io/security/mobile_nohttp/</guid><description>Intercepting Non-HTTP Traffic in Android Recently I have started solving a mobile security CTF called hpAndro and I stumbled upon two challenges focusing on intercepting non-HTTP traffic in Android. I tried to check if I could do it by setting up Wireshark on my laptop and detect this communication directly from that, but it was not working.
I thought I could change my perspective and monitor traffic directly from my device (it is always Linux).</description></item><item><title>Intercepting Traffic in Mobile Flutter Applications</title><link>https://alright21.github.io/security/mobile_flutter/</link><pubDate>Tue, 01 Aug 2023 08:50:38 +0200</pubDate><guid>https://alright21.github.io/security/mobile_flutter/</guid><description>Intercepting Traffic in Mobile Flutter Applications During our tests, it may happen that we have to find vulnerabilities in applications built with the Flutter framework. It is pretty common when we have both Android and iOS apps. This framework raises some problems when we need to intercept traffic for two reasons:
flutter apps are proxy unaware - if we add a proxy listener from the settings of our phone, the application will ignore it flutter apps often implement ssl pinning techniques that are not easily bypassed using standard frida scripts Below are explained the solutions for Android and iOS.</description></item><item><title>Mobile Security Introduction</title><link>https://alright21.github.io/security/mobile_security_intro/</link><pubDate>Sun, 23 Jul 2023 18:00:00 +0200</pubDate><guid>https://alright21.github.io/security/mobile_security_intro/</guid><description>Mobile Security Introduction After quite a while, I finally decided to upload this article. If you come across any inconsistencies, I am always open to feedback. I will continuously update it, aiming to create a comprehensive &amp;ldquo;Mobile Security Introduction Garden&amp;rdquo;. Have fun reading! :)
The world of mobile application security requires to have different skills and knowledge compared to web application testing because we are also dealing with a client installed on our device that handles user input, and often communicates with a backend server.</description></item><item><title>SrdnlenCTF</title><link>https://alright21.github.io/ctf/srdnlenctf/</link><pubDate>Wed, 12 Oct 2022 23:08:58 +0200</pubDate><guid>https://alright21.github.io/ctf/srdnlenctf/</guid><description>SrdnlenCTF Writeups for srdnlenCTF
Categories Web
I love pickles Challenges I love pickles Category Points Solves Web 50 51 Challenge Description: My Sardinian friend says she hates &amp;ldquo;su cugumere cunfettau&amp;rdquo;, but I love them, on top of my burger and in my code.
If you really know your pickles you can enter in my admin area.
Website:¬†http://ilovepickles.challs.srdnlen.it
Approach As the name of the challenge suggests, the application should use the pickle library to encode and decode the cookies (I found out about this library while I was playing the sekaiCTF, but I didn&amp;rsquo;t solve the challenge there).</description></item></channel></rss>