<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dev on Alberto Giust</title><link>https://alright21.github.io/categories/dev/</link><description>Recent content in Dev on Alberto Giust</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 29 Jan 2024 20:40:03 +0100</lastBuildDate><atom:link href="https://alright21.github.io/categories/dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Leet Code Exercises</title><link>https://alright21.github.io/dev/leet_code/</link><pubDate>Mon, 29 Jan 2024 20:40:03 +0100</pubDate><guid>https://alright21.github.io/dev/leet_code/</guid><description>Leet Code Exercises Here is a list of my Leet Code solution (non exaustive). I am following https://neetcode.io/roadmap
Contains Duplicate class Solution: def containsDuplicate(self, nums: List[int]) -&amp;gt; bool: result = {} for item in nums: if item in result: return True result[item] = True return False Valid Anagram class Solution: def isAnagram(self, s: str, t: str) -&amp;gt; bool: res = {} for item in s: if item in res: res[item]+=1 else: res[item]=1 for item in t: if item in res: res[item]-=1 if res[item]==0: del res[item] else: return False if len(res)&amp;gt;0: return False return True Two Sum class Solution: def twoSum(self, nums: List[int], target: int) -&amp;gt; List[int]: for i in range(len(nums)): for j in range(i+1,len(nums)): if nums[i] + nums[j] == target: return [i,j] Group Anagrams class Solution: def groupAnagrams(self, strs: List[str]) -&amp;gt; List[List[str]]: res = {} for s in strs: ss = str(sorted(s)) if ss in res: res[ss].</description></item></channel></rss>